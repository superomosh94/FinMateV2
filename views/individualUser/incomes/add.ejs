<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Income - FinMate</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .card {
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
            border: 1px solid rgba(0, 0, 0, 0.125);
        }
        .form-section {
            margin-bottom: 2rem;
        }
        .section-title {
            border-bottom: 2px solid #007bff;
            padding-bottom: 0.5rem;
            margin-bottom: 1.5rem;
            color: #007bff;
        }
        .btn-back {
            background-color: #6c757d;
            border-color: #6c757d;
            color: white;
        }
        .btn-back:hover {
            background-color: #5a6268;
            border-color: #545b62;
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <%- include('../../partials/sidebar') %>

            <!-- Main Content -->
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 py-4">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <div>
                        <h1 class="h3 mb-1">Add New Income</h1>
                        <p class="text-muted">Record a new income transaction</p>
                    </div>
                    <a href="/user/incomes" class="btn btn-back">
                        <i class="fas fa-arrow-left"></i> Back to Incomes
                    </a>
                </div>

                <!-- Display error messages if any -->
                <% if (typeof error !== 'undefined' && error) { %>
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <strong>Error:</strong> <%= error %>
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                <% } %>

                <!-- Display success messages if any -->
                <% if (typeof success !== 'undefined' && success) { %>
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        <strong>Success:</strong> <%= message %>
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                <% } %>

                <div class="row">
                    <div class="col-lg-8">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="card-title mb-0">Income Information</h5>
                            </div>
                            <div class="card-body">
                                <!-- Updated form to use traditional submission -->
                                <form id="incomeForm" action="/user/incomes/add" method="POST">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label for="title" class="form-label">Income Title *</label>
                                                <input type="text" class="form-control" id="title" name="title" required 
                                                       placeholder="e.g., Salary, Freelance Work, Bonus"
                                                       value="<%= typeof formData !== 'undefined' ? formData.title : '' %>">
                                                <div class="form-text">A descriptive name for this income</div>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label for="amount" class="form-label">Amount *</label>
                                                <div class="input-group">
                                                    <span class="input-group-text">Ksh</span>
                                                    <input type="number" class="form-control" id="amount" name="amount" 
                                                           step="0.01" min="0.01" required placeholder="0.00"
                                                           value="<%= typeof formData !== 'undefined' ? formData.amount : '' %>">
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label for="source" class="form-label">Income Source</label>
                                                <select class="form-select" id="source" name="source">
                                                    <option value="">Select Source</option>
                                                    <option value="Salary" <%= (typeof formData !== 'undefined' && formData.source === 'Salary') ? 'selected' : '' %>>Salary</option>
                                                    <option value="Freelance" <%= (typeof formData !== 'undefined' && formData.source === 'Freelance') ? 'selected' : '' %>>Freelance Work</option>
                                                    <option value="Business" <%= (typeof formData !== 'undefined' && formData.source === 'Business') ? 'selected' : '' %>>Business Income</option>
                                                    <option value="Investment" <%= (typeof formData !== 'undefined' && formData.source === 'Investment') ? 'selected' : '' %>>Investment</option>
                                                    <option value="Rental" <%= (typeof formData !== 'undefined' && formData.source === 'Rental') ? 'selected' : '' %>>Rental Income</option>
                                                    <option value="Bonus" <%= (typeof formData !== 'undefined' && formData.source === 'Bonus') ? 'selected' : '' %>>Bonus</option>
                                                    <option value="Commission" <%= (typeof formData !== 'undefined' && formData.source === 'Commission') ? 'selected' : '' %>>Commission</option>
                                                    <option value="Other" <%= (typeof formData !== 'undefined' && formData.source === 'Other') ? 'selected' : '' %>>Other</option>
                                                </select>
                                                <div class="form-text">Where did this income come from?</div>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label for="category" class="form-label">Category</label>
                                                <select class="form-select" id="category" name="category">
                                                    <option value="">Select Category</option>
                                                    <option value="Regular Income" <%= (typeof formData !== 'undefined' && formData.category === 'Regular Income') ? 'selected' : '' %>>Regular Income</option>
                                                    <option value="One-time Payment" <%= (typeof formData !== 'undefined' && formData.category === 'One-time Payment') ? 'selected' : '' %>>One-time Payment</option>
                                                    <option value="Passive Income" <%= (typeof formData !== 'undefined' && formData.category === 'Passive Income') ? 'selected' : '' %>>Passive Income</option>
                                                    <option value="Investment Return" <%= (typeof formData !== 'undefined' && formData.category === 'Investment Return') ? 'selected' : '' %>>Investment Return</option>
                                                    <option value="Gift" <%= (typeof formData !== 'undefined' && formData.category === 'Gift') ? 'selected' : '' %>>Gift</option>
                                                    <option value="Refund" <%= (typeof formData !== 'undefined' && formData.category === 'Refund') ? 'selected' : '' %>>Refund</option>
                                                    <option value="Other" <%= (typeof formData !== 'undefined' && formData.category === 'Other') ? 'selected' : '' %>>Other</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="mb-3">
                                        <label for="description" class="form-label">Description</label>
                                        <textarea class="form-control" id="description" name="description" 
                                                  rows="3" placeholder="Additional details about this income..."><%= typeof formData !== 'undefined' ? formData.description : '' %></textarea>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label for="received_date" class="form-label">Received Date *</label>
                                                <input type="date" class="form-control" id="received_date" name="received_date" required
                                                       value="<%= typeof formData !== 'undefined' ? formData.received_date : new Date().toISOString().split('T')[0] %>">
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label for="status" class="form-label">Status</label>
                                                <select class="form-select" id="status" name="status">
                                                    <option value="cleared" <%= (typeof formData !== 'undefined' && formData.status === 'cleared') ? 'selected' : '' %>>Cleared</option>
                                                    <option value="pending" <%= (typeof formData !== 'undefined' && formData.status === 'pending') ? 'selected' : '' %>>Pending</option>
                                                    <option value="cancelled" <%= (typeof formData !== 'undefined' && formData.status === 'cancelled') ? 'selected' : '' %>>Cancelled</option>
                                                </select>
                                                <div class="form-text">
                                                    <span class="text-success">Cleared</span> - Income has been received<br>
                                                    <span class="text-warning">Pending</span> - Expected but not yet received<br>
                                                    <span class="text-danger">Cancelled</span> - Income was cancelled
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="mb-3">
                                        <label for="team_id" class="form-label">Team (Optional)</label>
                                        <select class="form-select" id="team_id" name="team_id">
                                            <option value="">Personal Income</option>
                                            <!-- Teams will be populated dynamically -->
                                        </select>
                                        <div class="form-text">Assign this income to a team if applicable</div>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>

                    <div class="col-lg-4">
                        <!-- Quick Stats -->
                        <div class="card mb-4">
                            <div class="card-header">
                                <h6 class="card-title mb-0">Quick Stats</h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <small class="text-muted">This Month's Income</small>
                                    <h5 id="monthlyIncome">Ksh 0.00</h5>
                                </div>
                                <div class="mb-3">
                                    <small class="text-muted">Last Income</small>
                                    <h6 id="lastIncome">No records</h6>
                                </div>
                                <div>
                                    <small class="text-muted">Income Sources</small>
                                    <div id="incomeSources" class="mt-1">
                                        <!-- Will be populated dynamically -->
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="card">
                            <div class="card-body">
                                <div class="d-grid gap-2">
                                    <!-- Updated buttons to use form submission -->
                                    <button type="submit" form="incomeForm" class="btn btn-primary btn-lg">
                                        <i class="fas fa-save"></i> Save Income
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary" onclick="saveAndAddAnother()">
                                        <i class="fas fa-plus-circle"></i> Save & Add Another
                                    </button>
                                    <a href="/user/incomes" class="btn btn-outline-danger">
                                        <i class="fas fa-times"></i> Cancel
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <!-- Success Modal (keeping for potential future use) -->
    <div class="modal fade" id="successModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title">Success!</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <p id="successMessage">Income has been added successfully!</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <a href="/user/incomes" class="btn btn-primary">View All Incomes</a>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Set default date to today if not already set by server
        document.addEventListener('DOMContentLoaded', function() {
            const receivedDate = document.getElementById('received_date');
            if (!receivedDate.value) {
                receivedDate.valueAsDate = new Date();
            }
            
            loadTeams();
            loadQuickStats();
        });

        async function loadTeams() {
            try {
                const response = await fetch('/api/teams');
                const result = await response.json();
                
                if (result.success) {
                    const teamSelect = document.getElementById('team_id');
                    result.data.forEach(team => {
                        const option = document.createElement('option');
                        option.value = team.id;
                        option.textContent = team.name;
                        teamSelect.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading teams:', error);
            }
        }

        async function loadQuickStats() {
            try {
                const response = await fetch('/api/incomes/stats/summary');
                const result = await response.json();
                
                if (result.success) {
                    // Update monthly income
                    const currentMonth = new Date().getMonth() + 1;
                    const currentYear = new Date().getFullYear();
                    const monthlyData = result.data.monthlyBreakdown.find(month => 
                        month.month === currentMonth && month.year === currentYear
                    );
                    
                    if (monthlyData) {
                        document.getElementById('monthlyIncome').textContent = `Ksh ${parseFloat(monthlyData.total_amount).toFixed(2)}`;
                    }

                    // Update last income
                    const lastIncomeResponse = await fetch('/api/incomes?limit=1');
                    const lastIncomeResult = await lastIncomeResponse.json();
                    
                    if (lastIncomeResult.success && lastIncomeResult.data.length > 0) {
                        const lastIncome = lastIncomeResult.data[0];
                        document.getElementById('lastIncome').textContent = `${lastIncome.title} - Ksh ${parseFloat(lastIncome.amount).toFixed(2)}`;
                    }
                }
            } catch (error) {
                console.error('Error loading quick stats:', error);
            }
        }

        // Function to handle "Save & Add Another" - uses form submission but stays on page
        function saveAndAddAnother() {
            const form = document.getElementById('incomeForm');
            
            // Create a hidden input to indicate "add another"
            let addAnotherInput = document.getElementById('addAnother');
            if (!addAnotherInput) {
                addAnotherInput = document.createElement('input');
                addAnotherInput.type = 'hidden';
                addAnotherInput.name = 'addAnother';
                addAnotherInput.id = 'addAnother';
                addAnotherInput.value = 'true';
                form.appendChild(addAnotherInput);
            }
            
            // Submit the form
            form.submit();
        }

        // Add some dynamic behavior
        document.getElementById('source').addEventListener('change', function() {
            if (this.value === 'Other') {
                const customSource = prompt('Please specify the income source:');
                if (customSource) {
                    // Create a hidden input for custom source
                    let customSourceInput = document.getElementById('customSource');
                    if (!customSourceInput) {
                        customSourceInput = document.createElement('input');
                        customSourceInput.type = 'hidden';
                        customSourceInput.name = 'customSource';
                        customSourceInput.id = 'customSource';
                        document.getElementById('incomeForm').appendChild(customSourceInput);
                    }
                    customSourceInput.value = customSource;
                }
            }
        });

        // Auto-format amount input
        document.getElementById('amount').addEventListener('blur', function() {
            if (this.value) {
                this.value = parseFloat(this.value).toFixed(2);
            }
        });

        // Client-side validation before form submission
        document.getElementById('incomeForm').addEventListener('submit', function(e) {
            const title = document.getElementById('title').value.trim();
            const amount = document.getElementById('amount').value;
            const receivedDate = document.getElementById('received_date').value;
            
            if (!title) {
                alert('Please enter an income title');
                e.preventDefault();
                return;
            }
            
            if (!amount || parseFloat(amount) <= 0) {
                alert('Please enter a valid amount greater than 0');
                e.preventDefault();
                return;
            }
            
            if (!receivedDate) {
                alert('Please select a received date');
                e.preventDefault();
                return;
            }
        });
    </script>
</body>
</html>