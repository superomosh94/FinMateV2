<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Income Management - FinMate</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .income-card { transition: transform 0.2s; }
        .income-card:hover { transform: translateY(-2px); }
        .status-badge { font-size: 0.8em; }
        .amount-positive { color: #28a745; font-weight: bold; }
    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <%- include('../partials/sidebar') %>

            <!-- Main Content -->
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                    <h1 class="h2">Income Management</h1>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addIncomeModal">
                        <i class="fas fa-plus"></i> Add Income
                    </button>
                </div>

                <!-- Summary Cards -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="card text-white bg-primary">
                            <div class="card-body">
                                <h6 class="card-title">Total Income</h6>
                                <h3 id="totalIncome">$0.00</h3>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-white bg-success">
                            <div class="card-body">
                                <h6 class="card-title">Cleared</h6>
                                <h3 id="clearedIncome">$0.00</h3>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-white bg-warning">
                            <div class="card-body">
                                <h6 class="card-title">Pending</h6>
                                <h3 id="pendingIncome">$0.00</h3>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-white bg-info">
                            <div class="card-body">
                                <h6 class="card-title">This Month</h6>
                                <h3 id="monthlyIncome">$0.00</h3>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Filters -->
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-3">
                                <label class="form-label">Date Range</label>
                                <input type="date" class="form-control" id="startDate">
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">&nbsp;</label>
                                <input type="date" class="form-control" id="endDate">
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Status</label>
                                <select class="form-select" id="statusFilter">
                                    <option value="">All Status</option>
                                    <option value="cleared">Cleared</option>
                                    <option value="pending">Pending</option>
                                    <option value="cancelled">Cancelled</option>
                                </select>
                            </div>
                            <div class="col-md-3 d-flex align-items-end">
                                <button class="btn btn-outline-primary w-100" onclick="loadIncomes()">
                                    <i class="fas fa-filter"></i> Apply Filters
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Incomes Table -->
                <div class="card">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Title</th>
                                        <th>Amount</th>
                                        <th>Source</th>
                                        <th>Category</th>
                                        <th>Date</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="incomesTable">
                                    <!-- Incomes will be loaded here -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <!-- Add Income Modal -->
    <div class="modal fade" id="addIncomeModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Income</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="incomeForm">
                        <div class="mb-3">
                            <label class="form-label">Title *</label>
                            <input type="text" class="form-control" name="title" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Amount *</label>
                            <input type="number" class="form-control" name="amount" step="0.01" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Source</label>
                            <input type="text" class="form-control" name="source">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Category</label>
                            <input type="text" class="form-control" name="category">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" name="description" rows="3"></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Received Date *</label>
                            <input type="date" class="form-control" name="received_date" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Status</label>
                            <select class="form-select" name="status">
                                <option value="cleared">Cleared</option>
                                <option value="pending">Pending</option>
                                <option value="cancelled">Cancelled</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="saveIncome()">Save Income</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let currentEditingId = null;

        // Load incomes on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadIncomes();
            loadIncomeSummary();
        });

        async function loadIncomes() {
            try {
                const response = await fetch('/incomes');
                const result = await response.json();
                
                if (result.success) {
                    displayIncomes(result.data);
                }
            } catch (error) {
                console.error('Error loading incomes:', error);
                alert('Error loading incomes');
            }
            }

        function displayIncomes(incomes) {
            const tbody = document.getElementById('incomesTable');
            tbody.innerHTML = '';

            incomes.forEach(income => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${income.title}</td>
                    <td class="amount-positive">$${parseFloat(income.amount).toFixed(2)}</td>
                    <td>${income.source || '-'}</td>
                    <td>${income.category || '-'}</td>
                    <td>${new Date(income.received_date).toLocaleDateString()}</td>
                    <td>
                        <span class="badge ${getStatusBadgeClass(income.status)}">
                            ${income.status}
                        </span>
                    </td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary" onclick="editIncome(${income.id})">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="deleteIncome(${income.id})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        function getStatusBadgeClass(status) {
            switch(status) {
                case 'cleared': return 'bg-success';
                case 'pending': return 'bg-warning';
                case 'cancelled': return 'bg-danger';
                default: return 'bg-secondary';
            }
        }

        async function saveIncome() {
            const form = document.getElementById('incomeForm');
            const formData = new FormData(form);
            const data = Object.fromEntries(formData);

            try {
                const url = currentEditingId ? `/incomes/${currentEditingId}` : '/incomes';
                const method = currentEditingId ? 'PUT' : 'POST';

                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();

                if (result.success) {
                    // Close modal and reset form
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addIncomeModal'));
                    modal.hide();
                    form.reset();
                    currentEditingId = null;

                    // Reload data
                    loadIncomes();
                    loadIncomeSummary();

                    alert(result.message);
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Error saving income:', error);
                alert('Error saving income');
            }
        }

        async function editIncome(id) {
            try {
                const response = await fetch(`/incomes/${id}`);
                const result = await response.json();

                if (result.success) {
                    const income = result.data;
                    currentEditingId = income.id;

                    // Fill form with income data
                    document.querySelector('input[name="title"]').value = income.title;
                    document.querySelector('input[name="amount"]').value = income.amount;
                    document.querySelector('input[name="source"]').value = income.source || '';
                    document.querySelector('input[name="category"]').value = income.category || '';
                    document.querySelector('textarea[name="description"]').value = income.description || '';
                    document.querySelector('input[name="received_date"]').value = income.received_date;
                    document.querySelector('select[name="status"]').value = income.status;

                    // Show modal
                    const modal = new bootstrap.Modal(document.getElementById('addIncomeModal'));
                    modal.show();
                }
            } catch (error) {
                console.error('Error loading income:', error);
                alert('Error loading income data');
            }
        }

        async function deleteIncome(id) {
            if (confirm('Are you sure you want to delete this income?')) {
                try {
                    const response = await fetch(`/incomes/${id}`, {
                        method: 'DELETE'
                    });

                    const result = await response.json();

                    if (result.success) {
                        loadIncomes();
                        loadIncomeSummary();
                        alert(result.message);
                    } else {
                        alert('Error: ' + result.message);
                    }
                } catch (error) {
                    console.error('Error deleting income:', error);
                    alert('Error deleting income');
                }
            }
        }

        async function loadIncomeSummary() {
            try {
                const response = await fetch('/incomes/stats/summary');
                const result = await response.json();

                if (result.success) {
                    // Update summary cards
                    // This is a simplified version - you'd want to calculate these from the data
                    const total = result.data.summary.reduce((sum, item) => sum + parseFloat(item.total_amount), 0);
                    document.getElementById('totalIncome').textContent = `$${total.toFixed(2)}`;
                }
            } catch (error) {
                console.error('Error loading income summary:', error);
            }
        }

        // Reset form when modal is hidden
        document.getElementById('addIncomeModal').addEventListener('hidden.bs.modal', function () {
            document.getElementById('incomeForm').reset();
            currentEditingId = null;
        });
    </script>
</body>
</html>